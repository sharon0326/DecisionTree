import java.io.Serializable;
import java.util.ArrayList;
import java.text.*;
import java.lang.Math;
 
public class DecisionTree implements Serializable {
 
	DTNode rootDTNode;
	int minSizeDatalist; //minimum number of datapoints that should be present in the dataset so as to initiate a split
	
	// Mention the serialVersionUID explicitly in order to avoid getting errors while deserializing.
	public static final long serialVersionUID = 343L;
	
	public DecisionTree(ArrayList<Datum> datalist , int min) {
		minSizeDatalist = min;
		rootDTNode = (new DTNode()).fillDTNode(datalist);
	}
 
	class DTNode implements Serializable{
		//Mention the serialVersionUID explicitly in order to avoid getting errors while deserializing.
		public static final long serialVersionUID = 438L;
		boolean leaf;
		int label = -1;      // only defined if node is a leaf
		int attribute; // only defined if node is not a leaf
		double threshold;  // only defined if node is not a leaf
 
		DTNode left, right; //the left and right child of a particular node. (null if leaf)
 
		DTNode() {
			leaf = true;
			threshold = Double.MAX_VALUE;
		}
 
		DTNode fillDTNode(ArrayList<Datum> datalist) {
			DTNode new_node = new DTNode();
			//block1
			if (datalist.size() >= minSizeDatalist) {
				int beforetemp = datalist.get(0).y;
				int updated;
				boolean allsame = false;
				ArrayList<String> compare = new ArrayList<String>();
				for(int i =0; i<datalist.size(); i++) {
					updated = datalist.get(i).y; 
					if (updated == beforetemp) {
						compare.add("true");
					}
					else {
						compare.add("false");
					}
				}
				int j =0;
				while (j<compare.size()) {
					if (compare.get(j) == "true") {
						allsame = true;
						j+=1;
					}
					else{
						allsame =false;	
						break;						
					}
				}
				if (allsame) {
					new_node.leaf = true;
					new_node.label = beforetemp;
					return new_node;
				}
				
				//block2
				else {
					//split
					ArrayList<Datum> bestright = new ArrayList<Datum>();
					ArrayList<Datum> bestleft = new ArrayList<Datum>();
					new_node.leaf = false;
					double best_avg_entropy = Double.MAX_VALUE;
					double best_threshold = -1;
					int best_attr = -1;
					
					int havetry = datalist.get(0).x.length;
					//System.out.println(havetry);
					for(int a=0; a< havetry; a++) {
						for(int b=0; b< datalist.size(); b++) {
							ArrayList<Datum> suleft = new ArrayList<Datum>();
							ArrayList<Datum> suright = new ArrayList<Datum>();
							double temp =  datalist.get(b).x[a];
							
							int c = 0;
							while(c<datalist.size()) {
								if(datalist.get(c).x[a] < temp) {
									suleft.add(datalist.get(c));
									c+=1;
								}
								else {
									suright.add(datalist.get(c));
									c+=1;
								}
							}
							double RS = calcEntropy(suright);
							double LS = calcEntropy(suleft);
							double leftw =  1.0*suleft.size() /datalist.size();
							double rightw =  1.0*suright.size() /datalist.size();
							double CURR_S = LS*leftw+RS*rightw;
 
							if(CURR_S < best_avg_entropy) {
								bestleft = suleft;
								bestright = suright;
								best_avg_entropy = CURR_S;
								best_attr = a;
								best_threshold =temp;
							}
							else if (CURR_S == best_avg_entropy) {
								continue;
							}
						}	
					}
					new_node.attribute = best_attr;
					new_node.threshold = best_threshold;
					DTNode rightNode = new DTNode();
					DTNode leftNode = new DTNode();
					rightNode = rightNode.fillDTNode(bestright);
					leftNode = leftNode.fillDTNode(bestleft);
					new_node.left=leftNode;
					new_node.right = rightNode;
					
					return new_node;
				}
			}
			
			//block3
			else {
				new_node.label=findMajority(datalist);
				new_node.leaf = true;
				return new_node;
			}
		}
 
		// This is a helper method. Given a datalist, this method returns the label that has the most
		// occurrences. In case of a tie it returns the label with the smallest value (numerically) involved in the tie.
		int findMajority(ArrayList<Datum> datalist) {
			
			int [] votes = new int[2];
 
			//loop through the data and count the occurrences of datapoints of each label
			for (Datum data : datalist)
			{
				votes[data.y]+=1;
			}
			
			if (votes[0] >= votes[1])
				return 0;
			else
				return 1;
		}
 
 
 
 
		// This method takes in a datapoint (excluding the label) in the form of an array of type double (Datum.x) and
		// returns its corresponding label, as determined by the decision tree
		int classifyAtNode(double[] xQuery) {
			//base case--reach leaf
			if(this.leaf ==true) {
				return this.label;
			}
			//recursive-internal node
			else {
				if(xQuery[this.attribute] >=this.threshold) {
					return this.right.classifyAtNode(xQuery); 
				}
				else {
					return this.left.classifyAtNode(xQuery); 
				}
			}
		}
			//ADD CODE HERE
 
	/*
	public boolean equals(Object dt2){
		boolean rootEqual = false;
		boolean left_equal = false;
		boolean right_equal = false;
		
		ArrayList<String> compare = new ArrayList<String>();
		
		if ( !(dt2 instanceof DTNode)){
			compare.add("false");
			return false;
		}
		if (this == null || dt2 == null) {
			compare.add("false");
			return false;
		}
		if ((this.leaf==true &&((DTNode)dt2).leaf ==false)||(this.leaf==false && ((DTNode)dt2).leaf ==true)){
			compare.add("false");
			return false;
		}
		
		//recursion
		//base case--both leaf
		if(this.leaf ==true && ((DTNode)dt2).leaf ==true) {	
			if (this.label == ((DTNode)dt2).label) {
				compare.add("true1");
				System.out.println("1");
				//return true;
			}
			else if (this.label != ((DTNode)dt2).label){
				compare.add("false2");
				System.out.println("2");
				//return false;
			}
	    }
		//both internal
		else if((! this.leaf) && (! ((DTNode)dt2).leaf)) {
			
			if ((this.attribute == ((DTNode)dt2).attribute) && (this.threshold == ((DTNode)dt2).threshold)) {
				compare.add("true3");
				System.out.println("3");
			}
			else {
				compare.add("false4");
				System.out.println("4");
			}
			
			rootEqual = (this.attribute == ((DTNode)dt2).attribute) && (this.threshold == ((DTNode)dt2).threshold);
		    left_equal = (this.left).equals(((DTNode)dt2).left);     
		    right_equal = (this.right).equals(((DTNode)dt2).right);   
		    
		    //return  (rootEqual && left_equal  && right_equal);
	    }
		System.out.println("size"+compare.size());
		System.out.println(compare);
		
		boolean check=false;
		int j =0;
		while (j<compare.size()) {
			if (compare.get(j) == "true") {
				check=true;
				j+=1;
			}
			else{
				check=false;
				break;
			}
		}
		//System.out.println("end");
		return check;
		
		//return true;
	}
	*/
	public boolean equals(Object dt2){
		if ( !(dt2 instanceof DTNode)){
			return false;
		}
		if (this == null || dt2 == null) {
			return false;
		}
		if ((this.leaf==true &&((DTNode)dt2).leaf ==false)||(this.leaf==false && ((DTNode)dt2).leaf ==true)){
			return false;
		}
		
		boolean checklabel = false;
		boolean left_chi= false;
		boolean right_chi= false;
		//recursion
		//base case--both leaf
		if(this.leaf ==true && ((DTNode)dt2).leaf ==true) {	
			if (this.label == ((DTNode)dt2).label) {
				checklabel =true;
				left_chi=true;
				right_chi=true;
				
			}
			else if (this.label != ((DTNode)dt2).label){
				checklabel=false;				
				left_chi=false;
				right_chi=false;
			}
	    }
		
		//both internal
		else if((! this.leaf) && (! ((DTNode)dt2).leaf)) {
			boolean attrib =false;
			boolean threshold=false;
			if (this.attribute == ((DTNode)dt2).attribute) {
				attrib  =true;
			}
			if (this.threshold == ((DTNode)dt2).threshold) {
				threshold  =true;	
			}
			
			checklabel = attrib && threshold; 
			if (checklabel ==true) {
				left_chi= (this.left).equals(((DTNode)dt2).left);     
			    right_chi = (this.right).equals(((DTNode)dt2).right); 
			}
			else {
				left_chi=false;
				right_chi =false;
			}
	    }
		boolean sum = left_chi && right_chi;
		return  sum;
	}
}
	//Given a dataset, this returns the entropy of the dataset
	double calcEntropy(ArrayList<Datum> datalist) {
		double entropy = 0;
		double px = 0;
		float [] counter= new float[2];
		if (datalist.size()==0)
			return 0;
		double num0 = 0.00000001,num1 = 0.000000001;
 
		//calculates the number of points belonging to each of the labels
		for (Datum d : datalist)
		{
			counter[d.y]+=1;
		}
		//calculates the entropy using the formula specified in the document
		for (int i = 0 ; i< counter.length ; i++)
		{
			if (counter[i]>0)
			{
				px = counter[i]/datalist.size();
				entropy -= (px*Math.log(px)/Math.log(2));
			}
		}
 
		return entropy;
	}
 
 
	// given a datapoint (without the label) calls the DTNode.classifyAtNode() on the rootnode of the calling DecisionTree object
	int classify(double[] xQuery ) {
		return this.rootDTNode.classifyAtNode( xQuery );
	}
 
	// Checks the performance of a DecisionTree on a dataset
	// This method is provided in case you would like to compare your
	// results with the reference values provided in the PDF in the Data
	// section of the PDF
	String checkPerformance( ArrayList<Datum> datalist) {
		DecimalFormat df = new DecimalFormat("0.000");
		float total = datalist.size();
		float count = 0;
 
		for (int s = 0 ; s < datalist.size() ; s++) {
			double[] x = datalist.get(s).x;
			int result = datalist.get(s).y;
			if (classify(x) != result) {
				count = count + 1;
			}
		}
 
		return df.format((count/total));
	}
 
 
	//Given two DecisionTree objects, this method checks if both the trees are equal by
	//calling onto the DTNode.equals() method
	public static boolean equals(DecisionTree dt1,  DecisionTree dt2)
	{
		boolean flag = true;
		flag = dt1.rootDTNode.equals(dt2.rootDTNode);
		return flag;
	}
 
}
